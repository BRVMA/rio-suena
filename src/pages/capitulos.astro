---
import Header from "../components/Header.astro";
import Heading from "../components/Heading.astro";
import Layout from "../layouts/Layout.astro";

import '../styles/main.css';
import favicon from '../img/logo/logo-llave-azul.svg';
---

<html lang="es">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href={favicon.src}/>
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Capítulos</title>
	</head>
	<body class="leading-snug">
        <Header />

        <main class="flex flex-col items-center px-4 lg:px-16 2xl:px-40 pt-4 pb-12">
            <Heading>CAPÍTULOS</Heading>

            <div id="player"></div>
        </main>
	</body>
</html>

<script is:inline>
    // 2. This code loads the IFrame Player API code asynchronously.
    const tag = document.createElement('script');
    tag.src = "https://www.youtube.com/iframe_api";
    const firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    // 3. This function creates an <iframe> (and YouTube player)
    //    after the API code downloads.
    let player;
    function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
            width: '1920',
            height: '1080',
            videoId: '5EBdEoZUH7o',
            playerVars: {
                color: 'white',
                'playsinline': 0,
            },
            events: {
                'onReady': onPlayerReady,
                'onStateChange': onPlayerStateChange,
            }
        });
    }

    // 4. The API will call this function when the video player is ready.
    function onPlayerReady(_event) {
        const iframe = player.getIframe();
        iframe.style.setProperty('width', '100%');
        iframe.style.setProperty('height', '100%');
    }

    // 5. The API calls this function when the player's state changes.
    //    The function indicates that when playing a video (state=1),
    //    the player should play for six seconds and then stop.
    function onPlayerStateChange(event) {

    }
</script>
